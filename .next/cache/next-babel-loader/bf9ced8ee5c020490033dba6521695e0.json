{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport qs from 'qs';\nimport Head from 'next/head';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport { connect } from 'react-redux';\nimport { putBranchApp } from '../scr/redux/actions/branchApp';\nimport { makeStyles } from '@material-ui/core/styles';\nimport requestApi from '../scr/requestApi';\nimport keysToSnakeCase from '../server/utils/keysToSnakeCase';\n\nconst mapState = state => ({\n  appConfig: state.appConfig,\n  branchApp: state.branchApp,\n  session: state.session\n});\n\nconst connector = connect(mapState);\nconst useStyles = makeStyles(theme => ({\n  paddingContent: {\n    padding: theme.spacing(2)\n  },\n  filledNormalInput: {\n    padding: theme.spacing(1)\n  },\n  filledNormalAdornedEnd: {\n    paddingRight: 0\n  },\n  input: {\n    paddingLeft: theme.spacing(2)\n  }\n}));\n\nconst PageIndex = ({\n  appConfig,\n  branchApp,\n  session,\n  dispatch\n}) => {\n  const classes = useStyles();\n  const [loading, setLoading] = React.useState(false);\n  const [resultLink, setResultLink] = React.useState('');\n  const refResultLink = React.createRef();\n\n  const handleChangeBranchApp = (key, value) => {\n    dispatch(putBranchApp({\n      [key]: value\n    }));\n  };\n\n  React.useEffect(() => {\n    dispatch(putBranchApp({\n      resultLink\n    }));\n  }, [dispatch, resultLink]);\n\n  const onChangeInput = key => event => {\n    handleChangeBranchApp(key, event.currentTarget.value);\n  };\n\n  const onSubmit = async event => {\n    event.preventDefault();\n    setLoading(true);\n\n    try {\n      const input = _objectSpread({}, branchApp);\n\n      if (input.resultLink) delete input.resultLink;\n      const request = requestApi();\n      const response = await request({\n        method: 'post',\n        url: '/create-app',\n        data: qs.stringify(keysToSnakeCase(input)),\n        headers: {\n          'content-type': 'application/x-www-form-urlencoded;charset=utf-8',\n          authorization: `Bearer ${session}`\n        }\n      });\n      setResultLink(response.data.data);\n    } catch (error) {\n      // kesuen, ngenekno bae\n      // eslint-disable-next-line no-alert\n      alert(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return __jsx(Box, {\n    my: 8\n  }, __jsx(Head, null, __jsx(\"title\", null, appConfig.title)), __jsx(Paper, {\n    elevation: 3\n  }, __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(\"h1\", null, appConfig.name)), __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-user-id'\n  }, \"User ID\", __jsx(\"span\", {\n    style: {\n      color: 'red'\n    }\n  }, \"*\")), __jsx(OutlinedInput, {\n    id: 'input-branch-user-id',\n    type: 'text',\n    label: 'User ID',\n    value: branchApp.userId,\n    onChange: onChangeInput('userId'),\n    required: true\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-user-email'\n  }, \"User Email\", __jsx(\"span\", {\n    style: {\n      color: 'red'\n    }\n  }, \"*\")), __jsx(OutlinedInput, {\n    id: 'input-branch-user-email',\n    type: 'email',\n    label: 'User Email',\n    value: branchApp.userEmail,\n    onChange: onChangeInput('userEmail'),\n    required: true\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-redirect-link'\n  }, \"Redirect Link\", __jsx(\"span\", {\n    style: {\n      color: 'red'\n    }\n  }, \"*\")), __jsx(OutlinedInput, {\n    id: 'input-redirect-link',\n    type: 'url',\n    label: 'Redirect Link',\n    value: branchApp.redirectLink,\n    onChange: onChangeInput('redirectLink'),\n    required: true\n  }))))), __jsx(Divider, null), __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-og-title'\n  }, \"og_title\"), __jsx(OutlinedInput, {\n    id: 'input-branch-og-title',\n    type: 'text',\n    label: 'og_title',\n    value: branchApp.ogTitle || '',\n    onChange: onChangeInput('ogTitle')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-og-image-url'\n  }, \"og_image_url\"), __jsx(OutlinedInput, {\n    id: 'input-branch-og-image-url',\n    type: 'url',\n    label: 'og_image_url',\n    value: branchApp.ogImageUrl || '',\n    onChange: onChangeInput('ogImageUrl')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-og-description'\n  }, \"og_description\"), __jsx(OutlinedInput, {\n    id: 'input-branch-og-description',\n    type: 'text',\n    label: 'og_description',\n    value: branchApp.ogDescription || '',\n    onChange: onChangeInput('ogDescription')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(Button, {\n    variant: 'contained',\n    type: 'submit',\n    color: 'secondary',\n    disabled: loading\n  }, loading ? 'Loading cuk' : 'Submit'))))), __jsx(Divider, null), __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'filled',\n    fullWidth: true\n  }, __jsx(FilledInput, {\n    id: 'input-result-url',\n    inputRef: refResultLink,\n    name: 'input-result-url-original',\n    type: 'url',\n    value: resultLink,\n    margin: 'none',\n    classes: {\n      input: clsx(classes.filledNormalInput, classes.input),\n      adornedEnd: classes.filledNormalAdornedEnd\n    },\n    autoComplete: 'off',\n    placeholder: 'http://...',\n    inputProps: {\n      'aria-label': 'result',\n      onClick: () => {\n        if (refResultLink && refResultLink.current) {\n          refResultLink.current.select();\n        }\n\n        document.execCommand('copy');\n      }\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: 'end'\n    }, __jsx(IconButton, {\n      \"aria-label\": 'Copy URL',\n      onClick: () => {\n        if (refResultLink && refResultLink.current) {\n          refResultLink.current.select();\n        }\n\n        document.execCommand('copy');\n      }\n    }, __jsx(FileCopyIcon, {\n      fontSize: 'default'\n    })))\n  }))))))));\n};\n\nPageIndex.pageSize = 'msd';\nexport default connector(PageIndex);","map":null,"metadata":{},"sourceType":"module"}