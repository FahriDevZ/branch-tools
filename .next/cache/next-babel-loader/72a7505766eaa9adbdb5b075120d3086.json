{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport clsx from 'clsx';\nimport CloseIcon from '@material-ui/icons/Close';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600]\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark\n  },\n  info: {\n    backgroundColor: theme.palette.primary.dark\n  },\n  warning: {\n    backgroundColor: amber[700]\n  },\n  icon: {\n    fontSize: 20\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  defaultColor: {\n    color: theme.palette.common.white\n  }\n}));\n\nconst SnackbarContentWrapper = props => {\n  const classes = useStyles();\n\n  const {\n    className,\n    message,\n    onClose,\n    variant\n  } = props,\n        other = _objectWithoutProperties(props, [\"className\", \"message\", \"onClose\", \"variant\"]);\n\n  const Icon = variantIcon[variant];\n\n  const handleOnClose = event => {\n    if (onClose instanceof Function) {\n      onClose(event);\n    }\n  };\n\n  return __jsx(SnackbarContent, _extends({\n    className: clsx(classes.defaultColor, classes[variant], className),\n    \"aria-describedby\": 'client-snackbar',\n    message: __jsx(\"span\", {\n      id: 'client-snackbar',\n      className: classes.message\n    }, __jsx(Icon, {\n      className: clsx(classes.icon, classes.iconVariant)\n    }), message),\n    action: [__jsx(IconButton, {\n      key: 'close',\n      \"aria-label\": 'Close',\n      color: 'inherit',\n      onClick: handleOnClose\n    }, __jsx(CloseIcon, {\n      className: classes.icon\n    }))] // eslint-disable-next-line react/jsx-props-no-spreading\n\n  }, other));\n};\n\nexport default SnackbarContentWrapper;","map":null,"metadata":{},"sourceType":"module"}