{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\n\n/* eslint-disable no-underscore-dangle */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers'; // Get the Redux DevTools extension and fallback to a no-op function\n\nvar devtools = function devtools(x) {\n  return x;\n}; // noinspection JSUnresolvedVariable\n\n\nif (false && true && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nvar create = function create(initialState) {\n  var middleware = []; // noinspection JSUnresolvedVariable\n\n  if (false && true && !window.__REDUX_DEVTOOLS_EXTENSION__ && // redux-logger needs this feature\n  _Object$assign // eslint-disable-line dot-notation\n  ) {\n      // eslint-disable-next-line global-require\n      var createLogger = require('redux-logger').createLogger;\n\n      middleware = [].concat(_toConsumableArray(middleware), [createLogger()]);\n    }\n\n  return createStore(reducers, initialState, // Hydrate the store with server-side data\n  compose(applyMiddleware.apply(void 0, [thunk].concat(_toConsumableArray(middleware))), devtools));\n};\n\nvar makeStore = function makeStore(initialState) {\n  // Make sure to create a new store for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!true) {\n    return create(initialState);\n  } // Reuse store on the client-side\n\n\n  if (!global.__INIT_REDUX_STORE__) {\n    global.__INIT_REDUX_STORE__ = create(initialState);\n  }\n\n  return global.__INIT_REDUX_STORE__;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { makeStore };","map":null,"metadata":{},"sourceType":"module"}