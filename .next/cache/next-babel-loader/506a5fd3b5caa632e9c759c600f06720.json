{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport clsx from 'clsx';\nimport qs from 'qs';\nimport Head from 'next/head';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport FilledInput from '@material-ui/core/FilledInput';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport IconButton from '@material-ui/core/IconButton';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport NativeSelect from '@material-ui/core/NativeSelect';\nimport { connect } from 'react-redux';\nimport { putBranchApp } from '../scr/redux/actions/branchApp';\nimport { putShareLink } from '../scr/redux/actions/shareLink';\nimport { makeStyles } from '@material-ui/core/styles';\nimport requestApi from '../scr/requestApi';\nimport keysToSnakeCase from '../server/utils/keysToSnakeCase';\n\nvar mapState = function mapState(state) {\n  return {\n    appConfig: state.appConfig,\n    branchApp: state.branchApp,\n    session: state.session,\n    shareLink: state.shareLink\n  };\n};\n\nvar connector = connect(mapState);\nvar useStyles = makeStyles(function (theme) {\n  return {\n    paddingContent: {\n      padding: theme.spacing(2)\n    },\n    filledNormalInput: {\n      padding: theme.spacing(1)\n    },\n    filledNormalAdornedEnd: {\n      paddingRight: 0\n    },\n    input: {\n      paddingLeft: theme.spacing(2)\n    },\n    selectInputNative: {\n      padding: \"\".concat(theme.spacing(1), \"px \").concat(theme.spacing(2), \"px\"),\n      fontSize: 16,\n      transition: theme.transitions.create(['border-color', 'box-shadow'])\n    }\n  };\n});\nvar FacebookAppCollections = [{\n  id: 200368456664008,\n  name: 'We Heart It'\n}, {\n  id: 87741124305,\n  name: 'Youtube'\n}, {\n  id: 166222643790489,\n  name: 'Metacafe'\n}, {\n  id: 462754987849668,\n  name: 'Flickr.com'\n}, {\n  id: 187960271237149,\n  name: 'Detik.com'\n}, {\n  id: 160621007401976,\n  name: 'Liputan6.com'\n}, {\n  id: 324557847592228,\n  name: 'Kompas.com'\n}, {\n  id: 332404380172618,\n  name: 'Tempo.co'\n}];\n\nvar PageIndex = function PageIndex(_ref) {\n  var appConfig = _ref.appConfig,\n      branchApp = _ref.branchApp,\n      session = _ref.session,\n      shareLink = _ref.shareLink,\n      dispatch = _ref.dispatch;\n  var classes = useStyles();\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  var _React$useState3 = React.useState(shareLink.originalLink || ''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      resultLink = _React$useState4[0],\n      setResultLink = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedApp = _React$useState6[0],\n      setSelectedApp = _React$useState6[1];\n\n  var refResultLink = React.createRef();\n  var ElementListApp = [];\n  FacebookAppCollections.forEach(function (item, key) {\n    ElementListApp.push(__jsx(\"option\", {\n      value: key,\n      key: ElementListApp.length\n    }, item.name));\n  });\n\n  var handleChangeBranchApp = function handleChangeBranchApp(key, value) {\n    dispatch(putBranchApp(_defineProperty({}, key, value)));\n  };\n\n  React.useEffect(function () {\n    var app = FacebookAppCollections[selectedApp];\n\n    if (app !== undefined) {\n      if (resultLink && resultLink !== '') {\n        var query = new URLSearchParams(keysToSnakeCase({\n          appId: app.id,\n          display: 'popup',\n          href: resultLink\n        }));\n        var appLink = \"https://www.facebook.com/dialog/share?\".concat(query.toString());\n        dispatch(putShareLink({\n          app: app,\n          appLink: appLink,\n          originalLink: resultLink\n        }));\n      } else {\n        dispatch(putShareLink({\n          app: app,\n          originalLink: resultLink\n        }));\n      }\n    }\n  }, [dispatch, selectedApp, resultLink]);\n\n  var onChangeInput = function onChangeInput(key) {\n    return function (event) {\n      handleChangeBranchApp(key, event.currentTarget.value);\n    };\n  };\n\n  var onChangeApp = function onChangeApp(event) {\n    var index = _parseInt(event.currentTarget.value, 10);\n\n    setSelectedApp(index);\n  };\n\n  var onSubmit = function onSubmit(event) {\n    var request, response;\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            event.preventDefault();\n            setLoading(true);\n            _context.prev = 2;\n            request = requestApi();\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(request({\n              method: 'post',\n              url: '/create-app',\n              data: qs.stringify(keysToSnakeCase(branchApp)),\n              headers: {\n                'content-type': 'application/x-www-form-urlencoded;charset=utf-8',\n                authorization: \"Bearer \".concat(session)\n              }\n            }));\n\n          case 6:\n            response = _context.sent;\n            setResultLink(response.data.data);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](2);\n            // kesuen, ngenekno bae\n            // eslint-disable-next-line no-alert\n            alert(_context.t0.message);\n\n          case 13:\n            _context.prev = 13;\n            setLoading(false);\n            return _context.finish(13);\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 10, 13, 16]], _Promise);\n  };\n\n  return __jsx(Box, {\n    my: 8\n  }, __jsx(Head, null, __jsx(\"title\", null, appConfig.title)), __jsx(Paper, {\n    elevation: 3\n  }, __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(\"h1\", null, appConfig.name)), __jsx(\"form\", {\n    onSubmit: onSubmit\n  }, __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 4\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-user-id'\n  }, \"User ID\", __jsx(\"span\", {\n    style: {\n      color: 'red'\n    }\n  }, \"*\")), __jsx(OutlinedInput, {\n    id: 'input-branch-user-id',\n    type: 'text',\n    label: 'User ID',\n    value: branchApp.userId,\n    onChange: onChangeInput('userId'),\n    required: true\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 8\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-user-email'\n  }, \"User Email\", __jsx(\"span\", {\n    style: {\n      color: 'red'\n    }\n  }, \"*\")), __jsx(OutlinedInput, {\n    id: 'input-branch-user-email',\n    type: 'email',\n    label: 'User Email',\n    value: branchApp.userEmail,\n    onChange: onChangeInput('userEmail'),\n    required: true\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-redirect-link'\n  }, \"Redirect Link\", __jsx(\"span\", {\n    style: {\n      color: 'red'\n    }\n  }, \"*\")), __jsx(OutlinedInput, {\n    id: 'input-redirect-link',\n    type: 'url',\n    label: 'Redirect Link',\n    value: branchApp.redirectLink,\n    onChange: onChangeInput('redirectLink'),\n    required: true\n  }))))), __jsx(Divider, null), __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-og-title'\n  }, \"og_title\"), __jsx(OutlinedInput, {\n    id: 'input-branch-og-title',\n    type: 'text',\n    label: 'og_title',\n    value: branchApp.ogTitle || '',\n    onChange: onChangeInput('ogTitle')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-og-image-url'\n  }, \"og_image_url\"), __jsx(OutlinedInput, {\n    id: 'input-branch-og-image-url',\n    type: 'url',\n    label: 'og_image_url',\n    value: branchApp.ogImageUrl || '',\n    onChange: onChangeInput('ogImageUrl')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    variant: 'outlined',\n    size: 'small',\n    fullWidth: true\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-branch-og-description'\n  }, \"og_description\"), __jsx(OutlinedInput, {\n    id: 'input-branch-og-description',\n    type: 'text',\n    label: 'og_description',\n    value: branchApp.ogDescription || '',\n    onChange: onChangeInput('ogDescription')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControl, {\n    fullWidth: true\n  }, __jsx(Button, {\n    variant: 'contained',\n    type: 'submit',\n    color: 'secondary',\n    disabled: loading\n  }, loading ? 'Loading cuk' : 'Submit'))))), __jsx(Divider, null), __jsx(\"div\", {\n    className: classes.paddingContent\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 4\n  }, __jsx(FormControl, {\n    variant: 'filled',\n    fullWidth: true\n  }, __jsx(NativeSelect, {\n    value: selectedApp,\n    onChange: onChangeApp,\n    name: 'language',\n    inputProps: {\n      'aria-label': 'Language'\n    },\n    classes: {\n      select: classes.selectInputNative\n    }\n  }, ElementListApp))), __jsx(Grid, {\n    item: true,\n    xs: 8\n  }, __jsx(FormControl, {\n    variant: 'filled',\n    fullWidth: true\n  }, __jsx(FilledInput, {\n    id: 'input-result-url',\n    inputRef: refResultLink,\n    name: 'input-result-url-original',\n    type: 'url',\n    value: shareLink.appLink,\n    margin: 'none',\n    classes: {\n      input: clsx(classes.filledNormalInput, classes.input),\n      adornedEnd: classes.filledNormalAdornedEnd\n    },\n    autoComplete: 'off',\n    placeholder: 'http://...',\n    inputProps: {\n      'aria-label': 'result',\n      onClick: function onClick() {\n        if (refResultLink && refResultLink.current) {\n          refResultLink.current.select();\n        }\n\n        document.execCommand('copy');\n      }\n    },\n    endAdornment: __jsx(InputAdornment, {\n      position: 'end'\n    }, __jsx(IconButton, {\n      \"aria-label\": 'Copy URL',\n      onClick: function onClick() {\n        if (refResultLink && refResultLink.current) {\n          refResultLink.current.select();\n        }\n\n        document.execCommand('copy');\n      }\n    }, __jsx(FileCopyIcon, {\n      fontSize: 'default'\n    })))\n  }))))))));\n};\n\nPageIndex.pageSize = 'msd';\nexport default connector(PageIndex);","map":null,"metadata":{},"sourceType":"module"}