{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Router from 'next/router';\nimport Head from 'next/head';\nimport qs from 'qs';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport IconLoop from '@material-ui/icons/Loop';\nimport IconVisibility from '@material-ui/icons/Visibility';\nimport IconVisibilityOff from '@material-ui/icons/VisibilityOff';\nimport SnackbarContentWrapper from '../scr/components/SnackbarContentWrapper';\nimport { connect } from 'react-redux';\nimport { setSession } from '../scr/redux/actions/session';\nimport requestApi from '../scr/requestApi';\n\nconst mapState = state => ({\n  appConfig: state.appConfig\n});\n\nconst connector = connect(mapState);\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    marginLeft: -theme.spacing(1),\n    marginRight: -theme.spacing(1)\n  },\n  paper: {\n    padding: theme.spacing(2),\n    paddingTop: theme.spacing(6),\n    paddingBottom: theme.spacing(5),\n    position: 'relative',\n    overflow: 'hidden'\n  },\n  img: {\n    position: 'absolute',\n    top: -15,\n    right: -30,\n    width: 173,\n    opacity: 0.8\n  },\n  '@keyframes animateTitle': {\n    '0%': {\n      transform: 'rotate(40deg) translateX(-162px)'\n    },\n    '20%': {\n      transform: 'rotate(10deg) translateX(-162px)'\n    },\n    '100%': {\n      transform: 'rotate(0deg) rotateY(0deg)'\n    }\n  },\n  animateTitle: {\n    'animation-name': '$animateTitle',\n    'animation-duration': '0.5s',\n    position: 'relative'\n  },\n  margin: {\n    margin: theme.spacing(1)\n  },\n  '@keyframes munyer': {\n    '0%': {\n      transform: 'rotate(0deg) rotateY(180deg)'\n    },\n    '100%': {\n      transform: 'rotate(360deg) rotateY(180deg)'\n    }\n  },\n  munyer: {\n    animation: '$munyer 0.8s linear infinite'\n  }\n}));\n\nconst LoginPage = ({\n  appConfig,\n  dispatch\n}) => {\n  const classes = useStyles();\n  const initAlert = {\n    open: false,\n    message: '',\n    variant: 'warning'\n  };\n  const [alert, setAlert] = React.useState(initAlert);\n  const [input, setInput] = React.useState({\n    password: ''\n  });\n  const [showPassword, setShowPassword] = React.useState(false);\n  const [loading, setLoading] = React.useState(false);\n\n  const handleChange = key => event => {\n    const newInput = _objectSpread({}, input, {\n      [key]: event.target.value\n    });\n\n    setInput(newInput);\n  };\n\n  const handleClickShowPassword = () => {\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setAlert(initAlert);\n    setLoading(true);\n\n    try {\n      const request = requestApi();\n      const response = await request({\n        method: 'post',\n        url: '/authenticate',\n        data: qs.stringify(input),\n        headers: {\n          'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\n        }\n      });\n      dispatch(setSession(response.data.data));\n      Router.push('/');\n    } catch (error) {\n      setAlert({\n        open: true,\n        variant: 'error',\n        message: error.message\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleClose = () => {\n    setAlert(initAlert);\n  };\n\n  return __jsx(Box, {\n    my: 8\n  }, __jsx(Head, null, __jsx(\"title\", null, appConfig.title)), __jsx(Paper, {\n    elevation: 3,\n    className: classes.paper\n  }, __jsx(\"img\", {\n    className: classes.img,\n    src: '/images/monggo.gif',\n    alt: 'Welcome'\n  }), __jsx(\"h1\", {\n    className: classes.animateTitle\n  }, \"Welcome Beb\"), __jsx(\"div\", {\n    style: {\n      position: 'relative'\n    }\n  }, alert && alert.open && __jsx(SnackbarContentWrapper, {\n    style: {\n      marginBottom: 10\n    },\n    onClose: handleClose,\n    variant: alert.variant,\n    message: alert.message\n  }), __jsx(\"form\", {\n    onSubmit: handleSubmit,\n    className: classes.container\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.margin\n  }, __jsx(InputLabel, {\n    htmlFor: 'input-password'\n  }, \"Password\"), __jsx(Input, {\n    id: 'input-password',\n    type: showPassword ? 'text' : 'password',\n    value: input.password,\n    onChange: handleChange('password'),\n    autoComplete: 'off',\n    endAdornment: __jsx(InputAdornment, {\n      position: 'end'\n    }, __jsx(IconButton, {\n      color: 'default',\n      \"aria-label\": 'Toggle password visibility',\n      onClick: handleClickShowPassword\n    }, showPassword ? __jsx(IconVisibility, null) : __jsx(IconVisibilityOff, null)))\n  })), __jsx(FormControl, {\n    fullWidth: true,\n    className: classes.margin\n  }, __jsx(Button, {\n    variant: 'contained',\n    type: 'submit',\n    color: 'secondary',\n    disabled: loading\n  }, loading && __jsx(IconLoop, {\n    className: classes.munyer\n  }), \"Continue\"))))));\n};\n\nLoginPage.pageSize = 'sm';\nexport default connector(LoginPage);","map":null,"metadata":{},"sourceType":"module"}