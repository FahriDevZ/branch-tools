{"ast":null,"code":"/* eslint-disable no-underscore-dangle */\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers'; // Get the Redux DevTools extension and fallback to a no-op function\n\nlet devtools = x => x; // noinspection JSUnresolvedVariable\n\n\nif (false && false && window.__REDUX_DEVTOOLS_EXTENSION__) {\n  devtools = window.__REDUX_DEVTOOLS_EXTENSION__();\n}\n\nconst create = initialState => {\n  let middleware = []; // noinspection JSUnresolvedVariable\n\n  if (false && false && !window.__REDUX_DEVTOOLS_EXTENSION__ && // redux-logger needs this feature\n  Object['assign'] // eslint-disable-line dot-notation\n  ) {\n      // eslint-disable-next-line global-require\n      const createLogger = require('redux-logger').createLogger;\n\n      middleware = [...middleware, createLogger()];\n    }\n\n  return createStore(reducers, initialState, // Hydrate the store with server-side data\n  compose(applyMiddleware(thunk, ...middleware), devtools));\n};\n\nconst makeStore = initialState => {\n  // Make sure to create a new store for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!false) {\n    return create(initialState);\n  } // Reuse store on the client-side\n\n\n  if (!global.__INIT_REDUX_STORE__) {\n    global.__INIT_REDUX_STORE__ = create(initialState);\n  }\n\n  return global.__INIT_REDUX_STORE__;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { makeStore };","map":null,"metadata":{},"sourceType":"module"}